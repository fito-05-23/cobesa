# 📌 Cobesa - Aplicación en Flet

## Descripción

**Cobesa** es una aplicación fullstack diseñada para administrar y gestionar la cuenta de los usuarios de la Empresa Cobesa, dedicada a servicios de agua potable. El proyecto está desarrollado en **Python** y **Flet**, con **PostgreSQL** como base de datos.

## Tabla de Contenidos

- [Descripción](#descripción)
- [Tecnologías Utilizadas](#tecnologías-utilizadas)
- [Instalación](#instalación)
- [Uso](#uso)
- [Estructura del Proyecto](#estructura-del-proyecto)
- [Contribuir](#contribuir)
- [Licencia](#licencia)
- [Estructura de ramas](#flujo-de-trabajo-de-ramas)

## Tecnologías Utilizadas

- **Frontend y Backend:**
  - [Python](https://www.python.org/)
  - [Flet](https://flet.dev/)
  
- **Base de Datos:**
  - [PostgreSQL](https://www.postgresql.org/)

- **Otras Herramientas:**
  - [Git](https://git-scm.com/)
  - [GitHub](https://github.com/)
  - [Postman](https://www.postman.com/) (para probar APIs)

## Instalación

### Requisitos Previos

- [Python 3.10+](https://www.python.org/)
- [Git](https://git-scm.com/)
- Una cuenta de [GitHub](https://github.com/)
- [PostgreSQL](https://www.postgresql.org/)

### Pasos para Instalar

1. **Clonar el repositorio:**
   ```bash
   git clone https://github.com/tu-usuario/cobesa.git
   cd cobesa
   ```

2. **Crear un entorno virtual y activarlo:**
   ```bash
   python -m venv venv
   source venv/bin/activate  # En Windows: venv\Scripts\activate
   ```

3. **Instalar dependencias:**
   ```bash
   pip install -r requirements.txt
   ```

4. **Configurar PostgreSQL:**
   - Crear la base de datos y configurar las credenciales en el archivo `.env`.

5. **Ejecutar la aplicación:**
   ```bash
   python main.py
   ```

## Flujo de Trabajo de Ramas

Para mantener el proyecto organizado y facilitar la colaboración, seguimos un flujo de trabajo basado en ramas:

### 1. Rama Principal (`main`)
- Contiene el código estable y listo para producción.

### 2. Rama de Desarrollo (`develop`)
- Integra nuevas funcionalidades antes de ser fusionadas en `main`.

### 3. Ramas de Funcionalidad (`feature/*`)
- Cada nueva característica o mejora se desarrolla en una rama independiente.
- Ejemplo:
  ```bash
  git checkout -b feature/nueva-funcionalidad develop
  ```

### 4. Ramas de Corrección de Errores (`bugfix/*`)
- Para solucionar errores detectados en `develop`.

### 5. Ramas de Lanzamiento (`release/*`)
- Se crean cuando el código en `develop` está listo para ser lanzado.

### 6. Ramas de Hotfix (`hotfix/*`)
- Para corregir errores críticos directamente en `main`.

## Contribuir

1. Hacer un fork del repositorio.
2. Crear una nueva rama con la funcionalidad o corrección.
3. Hacer un pull request describiendo los cambios.

## Licencia

Este proyecto está bajo la licencia MIT. Para más información, revisa el archivo `LICENSE`.

---
Si tienes dudas o sugerencias, no dudes en contribuir o ponerte en contacto con el equipo de desarrollo. 🚀

